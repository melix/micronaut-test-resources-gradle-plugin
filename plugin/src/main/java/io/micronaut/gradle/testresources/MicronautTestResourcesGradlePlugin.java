/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.micronaut.gradle.testresources;

import org.gradle.api.GradleException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.artifacts.dsl.DependencyHandler;
import org.gradle.api.internal.project.ProjectInternal;
import org.gradle.api.provider.Provider;
import org.gradle.api.tasks.JavaExec;
import org.gradle.api.tasks.TaskContainer;
import org.gradle.api.tasks.TaskProvider;
import org.gradle.api.tasks.testing.Test;
import org.gradle.internal.event.ListenerManager;
import org.gradle.internal.service.ServiceRegistry;
import org.gradle.internal.session.BuildSessionLifecycleListener;

import java.lang.reflect.Field;
import java.util.Arrays;

public class MicronautTestResourcesGradlePlugin implements Plugin<Project> {
    public void apply(Project project) {
        Configuration proxy = createProxyConfiguration(project);
        DependencyHandler dependencies = project.getDependencies();
        proxy.getDependencies().addAll(Arrays.asList(
                dependencies.create("io.micronaut.test:micronaut-test-resources-proxy:1.0.0-SNAPSHOT"),
                dependencies.create("io.micronaut.test:micronaut-test-resources-jdbc-mysql:1.0.0-SNAPSHOT"),
                dependencies.create("io.micronaut.test:micronaut-test-resources-jdbc-postgresql:1.0.0-SNAPSHOT"),
                dependencies.create("io.micronaut.test:micronaut-test-resources-kafka:1.0.0-SNAPSHOT")
        ));

        Provider<ProxyService> proxyService = project.getGradle().getSharedServices().registerIfAbsent("testResourcesProxyService", ProxyService.class, spec -> {
            spec.getParameters().getClasspath().from(proxy);
        });
        TaskContainer tasks = project.getTasks();

        TaskProvider<StartProxy> startProxy = tasks.register("startProxy", StartProxy.class, task -> task.getProxy().set(proxyService));

        TaskProvider<WriteProxySettings> writeTestProperties = tasks.register("writeTestProperties", WriteProxySettings.class, task -> {
            task.getPort().set(13322);
            task.getOutputDirectory().set(project.getLayout().getBuildDirectory().dir("generated-resources/test-resources-proxy"));
        });
        project.getConfigurations().all(conf -> {
            String name = conf.getName();
            if ("developmentOnly".equals(name) || "testRuntimeOnly".equals(name)) {
                conf.getDependencies().add(dependencies.create("io.micronaut.test:micronaut-test-resources-client:1.0.0-SNAPSHOT"));
                conf.getDependencies().add(dependencies.create(project.files(writeTestProperties)));
            }
        });

        tasks.withType(Test.class).configureEach(t -> t.dependsOn(startProxy));
        tasks.withType(JavaExec.class).configureEach(t -> t.dependsOn(startProxy));

        configureProxyReset((ProjectInternal) project);
    }

    private void configureProxyReset(ProjectInternal project) {
        ServiceRegistry services = project.getServices();
        ListenerManager listenerManager = services.get(ListenerManager.class);
        Field parentField;
        try {
            parentField = listenerManager.getClass().getDeclaredField("parent");

            parentField.setAccessible(true);
            listenerManager = (ListenerManager) parentField.get(parentField.get(listenerManager));
            listenerManager.addListener(new BuildSessionLifecycleListener() {
                @Override
                public void beforeComplete() {
                    ProxyService.reset();
                }
            });
        } catch (NoSuchFieldException | IllegalAccessException e) {
            throw new GradleException(e.getMessage(), e);
        }
    }

    private Configuration createProxyConfiguration(Project project) {
        return project.getConfigurations().create("proxy", conf -> {
            conf.setDescription("Dependencies for the Micronaut test resources proxy");
            conf.setCanBeConsumed(false);
            conf.setCanBeResolved(true);
        });
    }

}
